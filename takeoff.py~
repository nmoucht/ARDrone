#!/usr/bin/env python 
import rospy 
#import roslib;roslib.load_manifest('ardrone_tutorials')
from std_msgs.msg import String 
from std_msgs.msg import Empty 
from geometry_msgs.msg import Twist
#from drone_status import DroneStatus
class BasicDroneController():
	def __init__(self):
		print "hello"
		self.pubT = rospy.Publisher("ardrone/takeoff", Empty, queue_size=10 )
   		self.pubL = rospy.Publisher("ardrone/land", Empty, queue_size=10 )
		#self.SendLaunch()
		rospy.init_node('launch', anonymous=True) 
		self.SendLaunch()
		self.rate = rospy.Rate(10) # 10hz 
		self.commandDrone= rospy.Publisher('/cmd_vel', Twist)
		self.command=Twist()
		self.commandTimer = rospy.Timer(rospy.Duration(100/1000.0),self.SendCommand)
		rospy.on_shutdown(self.SendLand)

	def SendLaunch(self):
		print "sfhsdf"
		for x in range(0,5):
			self.pubT.publish(Empty())
			rospy.Rate(10).sleep()

	def SendLand(self):
# Send a landing message to the ardrone driver
# Note we send this in all states, landing can do no harm
		self.pubL.publish(Empty())


	def SetCommand(self,roll=0,pitch=0,yaw_velocity=0,z_velocity=0):
		self.command.linear.x = pitch
		self.command.linear.y = roll
		self.command.linear.z = z_velocity
		self.command.angular.z = yaw_velocity

	def SendCommand(self,event):
		print "he"
		self.commandDrone.publish(self.command)

	def main(self):
		print "hello"
		rospy.init_node('launch', anonymous=True)
	
	
if __name__ == '__main__': 
 	try: 
		objName = BasicDroneController()
		objName.main()
	except rospy.ROSInterruptException: 
       			pass
